{"body":"__love2d-assets-loader__ is a library for assets loading on demand.\r\nIt works with [Löve2D](http://love2d.org) framework (compatible with Löve __0.8.0__).\r\nThe aim of this utility is to simplify in-game assets (fonts, audio, images) loading and management.\r\n\r\n__love2d-assets-loader__ have been highy inspired by [Vrld](https://github.com/vrld/)'s [Proxy](https://github.com/vrld/Princess/blob/master/main.lua) function.\r\n\r\n##Features\r\n\r\n* Loads required assets __on demand__.\r\n* __Automatic resources caching__ : when an asset is called for the first time, it is loaded and stored within the loader. Next calls will return the stored value.\r\n* Grants access to Löve's default [font](https://love2d.org/wiki/Font) (__Vera.ttf__)\r\n* Loads external [True Type](https://en.wikipedia.org/wiki/TrueType) (__.ttf__) [fonts](https://love2d.org/wiki/Font) with custom size\r\n* Loads [.wav](https://en.wikipedia.org/wiki/WAV), [.ogg](http://en.wikipedia.org/wiki/Ogg) and [.mp3](http://en.wikipedia.org/wiki/MP3) audio formats as [static or streaming](https://love2d.org/wiki/SourceType) [sources](https://love2d.org/wiki/Source).\r\n* Loads [.png](http://en.wikipedia.org/wiki/PNG) and [.jpg](https://en.wikipedia.org/wiki/JPEG) [images](https://love2d.org/wiki/Image)\r\n\r\n##Installation\r\nPut the file [loader.lua](https://github.com/Yonaba/love2d-assets-loader/blob/master/Loader/loader.lua) inside your project folder.<br/>\r\nCall it using the __require__ function.<br/>\r\nIt will return a reference to the public interface as a regular Lua table.\r\n\r\n##Usage\r\n__love2d-assets-loader__ is very simple to use.\r\nSay that your project folder is organized this way:\r\n\r\n<center><img src=\"http://ompldr.org/vZmN3ZQ\" alt=\"project folder tree\" width=\"161\" height=\"155\" border=\"0\" /></center>\r\n\r\nYou will have to specify the paths to your __Audio__, __Font__ and __Image__ assets to the loader, and then __initialize__ it.\r\nThis should be done inside <tt>love.load</tt> callback.\r\n\r\n```lua\r\nfunction love.load()  \r\n  loader = require 'loader'\r\n  loader.setBaseImageDir('img')\r\n  loader.setBaseAudioDir('audio')\r\n  loader.setBaseFontDir('fonts')\r\n  loader.init() -- Do not forget this!\r\nend  \r\n```\r\n\r\nAnd that's it!\r\n\r\n##Loading Fonts\r\n###Loading Löve default font\r\n\r\nLöve default font can be accessed via <tt>loader.Font</tt>\r\n\r\n```lua\r\nfunction love.draw()\r\n  love.graphics.setFont(loader.Font[15]) -- Love default with size 15\r\n  love.graphics.setFont(loader.Font(15)) -- Same as before\r\n  \r\n  love.graphics.setFont(loader.Font[18]) -- Love default with size 18\r\n  love.graphics.setFont(loader.Font(18)) -- Same as before\r\n  \r\n  love.graphics.setFont(loader.Font()) -- Whith no arg, will use a customisable default font size\r\nend\r\n```\r\n\r\n###Loading custom True-Type fonts\r\n\r\nLöve custom fonts can be accessed via <tt>loader.extFont</tt>\r\n\r\n```lua\r\nfunction love.draw()\r\n  -- Assuming you have a font named Arial.ttf inside your base font folder.\r\n  love.graphics.setFont(loader.extFont.Arial[15]) -- Arial font size 15\r\n  love.graphics.setFont(loader.extFont.Arial(15)) -- Same as before\r\n  \r\n  love.graphics.setFont(loader.extFont.Arial[18]) -- Arial font size 18\r\n  love.graphics.setFont(loader.extFont.Arial(18)) -- Same as before\r\n  \r\n  love.graphics.setFont(loader.extFont.Arial()) -- Whith no arg, will use a customisable default font size\r\nend\r\n```\r\n\r\n##Loading Audio\r\n\r\nAudio files (.ogg, .wav and .mp3) can be loaded via <tt>loader.Audio.Stream</tt> (streaming playback) or <tt>loader.Audio.Static</tt> (static playback).\r\n\r\n```lua\r\n  -- Assuming you have an audio file name 'Love.ogg' in your base audio folder\r\n  love.audio.play(loader.Audio.Stream.Love) -- Will be streamed\r\n  love.audio.play(loader.Audio.Static.Love) -- will be decoded before playback\r\n  \r\n  -- Assuming you have an audio file name 'tick.wav' in your base audio folder\r\n  love.audio.play(loader.Audio.Stream.tick) -- Will be streamed\r\n  love.audio.play(loader.Audio.Static.tick) -- will be decoded before playback\r\n\r\n  -- Assuming you have an audio file name 'stream.mp3' in your base audio folder\r\n  love.audio.play(loader.Audio.Stream.stream) -- Will be streamed\r\n  love.audio.play(loader.Audio.Static.stream) -- will be decoded before playback\r\n```\r\n\r\n##Loading Images\r\n\r\nImages files (.png and .jpg) can be loaded via <tt>loader.Image</tt>\r\n\r\n```lua\r\nfunction love.draw()\r\n  -- Assuming you have a 'player.png' or 'player.jpg' file in your base image folder\r\n  love.graphics.draw(loader.Image.player,0,0)\r\nend\r\n```\r\n\r\nA very interesting feature here is that <tt>loader.Image</tt> supports nested folders.\r\nSay that in your base image folder (here, __\"img/\"__) you have the following tree:\r\n\r\n    img/\r\n    --> (folder) Maps/\r\n       --> (file) map1.jpg\r\n       --> (file) map2.jpg\r\n  \t\t --> (folder) Ground/\r\n\t\t\t    --> (file) g1.png\r\n\t\t\t    --> (file) g2.png\r\n    --> (file) player.png \r\n\t\r\n```lua\r\nfunction love.draw()\r\n  love.graphics.draw(loader.Image.Maps.Ground.g1,0,0) -- draws 'img/Maps/Ground/g1.png'\r\n  love.graphics.draw(loader.Image.Maps.map2,0,0) -- draws 'img/Maps/map2.jpg'\r\n  love.graphics.draw(loader.Image.player,0,0) -- draws 'img/player.png'\r\nend\r\n```\r\n\r\n##Public Interface\r\n###Setters\r\n* <tt>loader.setBaseFontDir(dir)</tt>: sets <tt>dir</tt> as the base font folder.\r\n* <tt>loader.setBaseImageDir(dir)</tt>: sets <tt>dir</tt> as the base image folder\r\n* <tt>loader.setBaseAudioDir(dir)</tt>: sets <tt>dir</tt> as the base audio folder\r\n* <tt>loader.setBaseFontSize(integer)</tt>: sets <tt>integer</tt> as the default font size\r\n\r\n###Getters\r\n* <tt>loader.getBaseFontDir(dir)</tt>: returns the base font folder.\r\n* <tt>loader.getBaseImageDir(dir)</tt>: returns the base image folder\r\n* <tt>loader.getBaseAudioDir(dir)</tt>: returns the base audio folder\r\n* <tt>loader.getBaseFontSize(integer)</tt>: returns the default font size\r\n\r\n###Initialization\r\n* <tt>loader.init()</tt>: Inits the loader. Should be called after using setters.\r\n\r\n###Loading routines\r\n* <tt>loader.Font</tt>: access to Löve default font\r\n* <tt>loader.extFont</tt>: access to custom true type fonts\r\n* <tt>loader.Audio.Stream</tt>: loads audio files for streaming playback.\r\n* <tt>loader.Audio.Static</tt>: loads audio files for static playback.\r\n* <tt>loader.Image</tt>: loads images\r\n\r\n##Final Notes\r\n\r\n__love2d-assets-loader__ checks for <tt>love</tt> namespace before running, to prevent this lib being used\r\nwithout [Love2D](https://love2d.org).\r\nAlso, parts of __love2d-assets-loader__ are relevant to [Love2D](https://love2d.org)'s modules.\r\n\r\n* <tt>loader.Audio</tt> requires <tt>love.audio</tt> and <tt>love.sound</tt>\r\n* <tt>loader.Image</tt> requires <tt>love.image</tt> and <tt>love.graphics</tt>\r\n* <tt>loader.Font</tt> and <tt>loader.extFont</tt> both require <tt>love.graphics</tt>\r\n\r\nBe sure to have these modules activated through your [configuration file](https://love2d.org/wiki/Config_Files).\r\n\r\n\r\n##License\r\nThis work is released under the terms of [MIT-LICENSE](http://www.opensource.org/licenses/mit-license.php)<br/>\r\nCopyright (c) 2012 Roland Yonaba\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a\r\n    copy of this software and associated documentation files (the\r\n    \"Software\"), to deal in the Software without restriction, including\r\n    without limitation the rights to use, copy, modify, merge, publish,\r\n    distribute, sublicense, and/or sell copies of the Software, and to\r\n    permit persons to whom the Software is furnished to do so, subject to\r\n    the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included\r\n    in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","name":"Love2d-assets-loader","google":"UA-33850683-1","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Assets loader and manager for Löve2D Framework"}